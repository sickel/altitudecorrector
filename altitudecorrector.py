# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Altitudecorrector
                                 A QGIS plugin
 Calculates altitude correction for airborne gamma spectroemtry data
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-11-07
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Morten Sickel
        email                : morten@sickel.net
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .altitudecorrector_dialog import AltitudecorrectorDialog
import os.path

from qgis.PyQt.QtWidgets import QGraphicsScene, QGraphicsView
# QApplication, ,QCheckBox, QFileDialog

from qgis.core import QgsVectorLayer, QgsFeature, QgsField, QgsGeometry, QgsPointXY, QgsField, QgsProject, QgsMapLayerProxyModel, QgsCoordinateTransform, QgsCoordinateReferenceSystem, QgsFieldProxyModel

import processing

class Altitudecorrector:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Altitudecorrector_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Spectral data')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Altitudecorrector', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=False,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def updatemeasfields(self):
        self.dlg.FCBMeasure.setLayer(self.dlg.LCBMeasure.currentLayer())
        self.dlg.FCBAltitude.setLayer(self.dlg.LCBMeasure.currentLayer())



    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/altitudecorrector/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Altitude correction'),
            callback=self.run,
            parent=self.iface.mainWindow())
        self.dlg = AltitudecorrectorDialog()
        self.dlg.LCBArea.setFilters(QgsMapLayerProxyModel.PolygonLayer)
        self.dlg.FCBArea.setLayer(self.dlg.LCBArea.currentLayer())
        #self.dlg.LCBArea.setFilters(QgsMapLayerProxyModel.PointLayer)
        self.dlg.LCBArea.layerChanged.connect(lambda: self.dlg.FCBArea.setLayer(self.dlg.LCBArea.currentLayer()))   
        self.dlg.LCBMeasure.setFilters(QgsMapLayerProxyModel.PointLayer)
        self.updatemeasfields()
        self.dlg.FCBMeasure.setLayer(self.dlg.LCBArea.currentLayer())
        self.dlg.FCBMeasure.setFilters(QgsFieldProxyModel.Numeric)
        self.dlg.FCBAltitude.setFilters(QgsFieldProxyModel.Numeric)
        self.dlg.LCBMeasure.layerChanged.connect(self.updatemeasfields)   
        
        # will be set False in run()
        self.first_start = True

    

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&Altitudecorrector'),
                action)
            self.iface.removeToolBarIcon(action)
    
    def valueandalt(self,layer):
        result=[]
        self.measure=[]
        self.altitude=[]
        features=layer.getFeatures()
        valueidx = layer.fields().indexFromName('dose1')
        altidx=layer.fields().indexFromName('altitude')
        for feat in features:
            attrs=feat.attributes()
            #result.append([attrs[altidx],attrs[valueidx]])
            self.altitude.append(attrs[altidx])
            self.measure.append(attrs[valueidx])
        return([self.altitude,self.measure])
    
    def altplot(self,dataset,graphicsview):
        w=graphicsview.width()*0.75
        h=graphicsview.height()*0.75
        
        scene=QGraphicsScene()
        graphicsview.setScene(scene)
        xspan=[min(dataset[0]),max(dataset[0])]
        yspan=[min(dataset[1]),max(dataset[1])]
        xfact=(xspan[1]-xspan[0])/w
        yfact=(yspan[1]-yspan[0])/h
        rad=2
        for alt,meas in zip(dataset[0],dataset[1]):
            scene.addEllipse((alt-xspan[0])/xfact,h-(meas-yspan[0])/yfact,rad*2,rad*2)
    
    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            waterlayer=QgsProject.instance().mapLayersByName('Waterdata')[0]
            landlayer=QgsProject.instance().mapLayersByName('Landdata')[0]
            waterdata=self.valueandalt(waterlayer)
            landdata=self.valueandalt(landlayer)
            self.altplot(waterdata,self.dlg.gwWater)
            self.altplot(landdata,self.dlg.gwLand)
